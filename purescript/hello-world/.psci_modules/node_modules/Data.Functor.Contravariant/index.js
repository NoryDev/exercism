"use strict";
var Prelude = require("../Prelude");
var Data_Functor = require("../Data.Functor");
var Data_Void = require("../Data.Void");

/**
 *  | A `Contravariant` functor can be seen as a way of changing the input type
 *  | of a consumer of input, in contrast to the standard covariant `Functor`
 *  | that can be seen as a way of changing the output type of a producer of
 *  | output.
 *  |
 *  | `Contravariant` instances should satisfy the following laws:
 *  |
 *  | - Identity `(>$<) id = id`
 *  | - Composition `(f >$<) <<< (g >$<) = (>$<) (g <<< f)`
 */
var Contravariant = function (cmap) {
    this.cmap = cmap;
};

/**
 *  | A `Contravariant` functor can be seen as a way of changing the input type
 *  | of a consumer of input, in contrast to the standard covariant `Functor`
 *  | that can be seen as a way of changing the output type of a producer of
 *  | output.
 *  |
 *  | `Contravariant` instances should satisfy the following laws:
 *  |
 *  | - Identity `(>$<) id = id`
 *  | - Composition `(f >$<) <<< (g >$<) = (>$<) (g <<< f)`
 */
var cmap = function (dict) {
    return dict.cmap;
};

/**
 *  | `cmapFlipped` is `cmap` with its arguments reversed.
 */
var cmapFlipped = function (dictContravariant) {
    return function (x) {
        return function (f) {
            return cmap(dictContravariant)(f)(x);
        };
    };
};
var coerce = function (dictContravariant) {
    return function (dictFunctor) {
        return function (a) {
            return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
        };
    };
};
module.exports = {
    Contravariant: Contravariant, 
    cmap: cmap, 
    cmapFlipped: cmapFlipped, 
    coerce: coerce
};
