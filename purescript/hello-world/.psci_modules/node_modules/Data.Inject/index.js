
/**
 *  | This module defines a type class `Inject` which is useful
 *  | when working with coproducts of functors.
 */
"use strict";
var Prelude = require("../Prelude");
var Data_Either = require("../Data.Either");
var Data_Functor_Coproduct = require("../Data.Functor.Coproduct");
var Data_Maybe = require("../Data.Maybe");
var Control_Category = require("../Control.Category");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");

/**
 *  | The `Inject` class asserts a coproduct relationship between two functors.
 *  |
 *  | Specifically, an instance `Inject f g` indicates that `g` is isomorphic to
 *  | a coproduct of `f` and some third functor.
 *  |
 *  | Laws:
 *  |
 *  | - `prj g = Just f` if and only if `inj f = g`
 */
var Inject = function (inj, prj) {
    this.inj = inj;
    this.prj = prj;
};

/**
 *  | The `Inject` class asserts a coproduct relationship between two functors.
 *  |
 *  | Specifically, an instance `Inject f g` indicates that `g` is isomorphic to
 *  | a coproduct of `f` and some third functor.
 *  |
 *  | Laws:
 *  |
 *  | - `prj g = Just f` if and only if `inj f = g`
 */
var prj = function (dict) {
    return dict.prj;
};

/**
 *  | Any functor is isomorphic to the coproduct of itself with the
 *  | constantly-`Void` functor.
 */
var injectReflexive = new Inject(Control_Category.id(Control_Category.categoryFn), Data_Maybe.Just.create);

/**
 *  | Left injection
 */
var injectLeft = new Inject(function ($1) {
    return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($1));
}, Data_Functor_Coproduct.coproduct(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value)));

/**
 *  | The `Inject` class asserts a coproduct relationship between two functors.
 *  |
 *  | Specifically, an instance `Inject f g` indicates that `g` is isomorphic to
 *  | a coproduct of `f` and some third functor.
 *  |
 *  | Laws:
 *  |
 *  | - `prj g = Just f` if and only if `inj f = g`
 */
var inj = function (dict) {
    return dict.inj;
};

/**
 *  | Right injection
 */
var injectRight = function (dictInject) {
    return new Inject(function ($2) {
        return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create(inj(dictInject)($2)));
    }, Data_Functor_Coproduct.coproduct(Data_Function["const"](Data_Maybe.Nothing.value))(prj(dictInject)));
};
module.exports = {
    Inject: Inject, 
    inj: inj, 
    prj: prj, 
    injectReflexive: injectReflexive, 
    injectLeft: injectLeft, 
    injectRight: injectRight
};
