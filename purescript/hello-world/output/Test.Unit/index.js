// Generated by psc version 0.10.5
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_AVar = require("../Control.Monad.Aff.AVar");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Timer = require("../Control.Monad.Eff.Timer");
var Control_Monad_Free = require("../Control.Monad.Free");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_List = require("../Data.List");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Functor = require("../Data.Functor");
var Data_Function = require("../Data.Function");
var Data_Unit = require("../Data.Unit");
var Control_Bind = require("../Control.Bind");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Show = require("../Data.Show");
var Data_List_Types = require("../Data.List.Types");
var Control_Applicative = require("../Control.Applicative");
var Group = (function () {
    function Group(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Group.create = function (value0) {
        return function (value1) {
            return new Group(value0, value1);
        };
    };
    return Group;
})();
var TestGroup = (function () {
    function TestGroup(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TestGroup.create = function (value0) {
        return function (value1) {
            return new TestGroup(value0, value1);
        };
    };
    return TestGroup;
})();
var TestUnit = (function () {
    function TestUnit(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TestUnit.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TestUnit(value0, value1, value2);
            };
        };
    };
    return TestUnit;
})();
var test = function (l) {
    return function (t) {
        return Control_Monad_Free.liftF(new TestUnit(l, $foreign.memoise(t), Data_Unit.unit));
    };
};
var suite = function (label) {
    return function (tests) {
        return Control_Monad_Free.liftF(new TestGroup(new Group(label, tests), Data_Unit.unit));
    };
};
var success = Control_Monad_Aff.makeAff(function (v) {
    return function (succeed) {
        return succeed(Data_Unit.unit);
    };
});
var pickFirst = function (t1) {
    return function (t2) {
        return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v) {
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(t1))(Data_Either.either(Control_Monad_Aff_AVar.killVar(v))(Control_Monad_Aff_AVar.putVar(v)))))(function (v1) {
                return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(t2))(Data_Either.either(Control_Monad_Aff_AVar.killVar(v))(Control_Monad_Aff_AVar.putVar(v)))))(function (v2) {
                    return Control_Monad_Aff.cancelWith(Control_Monad_Aff_AVar.takeVar(v))(Data_Semigroup.append(Control_Monad_Aff.semigroupCanceler)(v1)(v2));
                });
            });
        });
    };
};
var makeTimeout = function (time) {
    return Control_Monad_Aff.makeAff(function (fail) {
        return function (v) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setTimeout(time)(fail(Control_Monad_Eff_Exception.error("test timed out after " + (Data_Show.show(Data_Show.showInt)(time) + "ms")))));
        };
    });
};
var timeout = function (time) {
    return function (t) {
        return pickFirst(t)(makeTimeout(time));
    };
};
var keepErrors = (function () {
    var run = function (s) {
        return function (v) {
            if (v.value1 instanceof Data_Either.Left) {
                return Data_List.snoc(s)(new Data_Tuple.Tuple(v.value0, v.value1.value0));
            };
            return s;
        };
    };
    return Data_Foldable.foldl(Data_List_Types.foldableList)(run)(Data_List_Types.Nil.value);
})();
var it = test;
var functorTestF = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof TestGroup) {
            return new TestGroup(v.value0, f(v.value1));
        };
        if (v instanceof TestUnit) {
            return new TestUnit(v.value0, v.value1, f(v.value2));
        };
        throw new Error("Failed pattern match at Test.Unit line 68, column 3 - line 68, column 44: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var walkSuite = function (runItem) {
    return function (tests) {
        return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar["makeVar'"](Data_List_Types.Nil.value))(function (v) {
            var walkItem = function (path) {
                return function (v1) {
                    if (v1 instanceof TestGroup) {
                        return Control_Bind.bind(Control_Monad_Aff.bindAff)(runItem(path)(v1))(function () {
                            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Free.runFreeM(functorTestF)(Control_Monad_Aff.monadRecAff)(walkItem(Data_List.snoc(path)(v1.value0.value0)))(v1.value0.value1))(function () {
                                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value1);
                            });
                        });
                    };
                    if (v1 instanceof TestUnit) {
                        return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.modifyVar(Data_List_Types.Cons.create(new Data_Tuple.Tuple(Data_List.snoc(path)(v1.value0), v1.value1)))(v))(function () {
                            return Control_Bind.bind(Control_Monad_Aff.bindAff)(runItem(path)(v1))(function () {
                                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value2);
                            });
                        });
                    };
                    throw new Error("Failed pattern match at Test.Unit line 91, column 27 - line 103, column 11: " + [ path.constructor.name, v1.constructor.name ]);
                };
            };
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Free.runFreeM(functorTestF)(Control_Monad_Aff.monadRecAff)(walkItem(Data_List_Types.Nil.value))(tests))(function () {
                return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v))(function (v1) {
                    return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
                });
            });
        });
    };
};
var failure = function (reason) {
    return Control_Monad_Aff.makeAff(function (fail) {
        return function (v) {
            return fail(Control_Monad_Eff_Exception.error(reason));
        };
    });
};
var describe = suite;
var collectTests = walkSuite(function (v) {
    return function (v1) {
        return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
    };
});
var collectResults = function (tests) {
    var run = function (v) {
        return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Tuple.Tuple.create(v.value0))(Control_Monad_Aff.attempt(v.value1));
    };
    return Data_Traversable["for"](Control_Monad_Aff.applicativeAff)(Data_List_Types.traversableList)(tests)(run);
};
module.exports = {
    Group: Group, 
    TestGroup: TestGroup, 
    TestUnit: TestUnit, 
    collectResults: collectResults, 
    collectTests: collectTests, 
    describe: describe, 
    failure: failure, 
    it: it, 
    keepErrors: keepErrors, 
    success: success, 
    suite: suite, 
    test: test, 
    timeout: timeout, 
    walkSuite: walkSuite, 
    functorTestF: functorTestF
};
